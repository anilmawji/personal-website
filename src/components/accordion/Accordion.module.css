:root {
  --accordion-height: 100px;
  --accordion-border-radius: 8px;
  --accordion-active-color: rgba(108, 250, 132, 0.8);
  --accordion-transition: 300ms ease;
  --accordion-hover-color: #a0a0a0;
}

/* This is to make the header border radius reappear when the accordion collapses */
.open .header {
  transition: 0s border-radius 0s ease;
}

.header.rounded {
  border-radius: 8px;
}

.header.roundedRight {
  border-top-right-radius: 8px;
  border-bottom-right-radius: 8px;
}

.header.roundedTop {
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
}

.header.roundedTopRight {
  border-top-right-radius: 8px;
}

.open .title {
  color: var(--accordion-active-color);
}

.arrow {
  margin-right: 20px;
  padding: 6px;
  transform: rotate(90deg);
  transition: transform var(--accordion-transition);
}

.arrow svg {
  min-width: 16px;
  min-height: 16px;
  fill: #4f4f4f;
  transition: fill var(--accordion-transition);
}

.open .arrow {
  transform: rotate(270deg);
}

.open .arrow svg {
  fill: var(--accordion-active-color);
}

/* uses grid trick to animate from height 0 to auto
 * See https://www.youtube.com/watch?v=B_n4YONte5A */
.drawer {
  background: var(--main-bg-color);
  display: grid;
  grid-template-rows: 0fr;
  transition: grid-template-rows 200ms ease;
}

.drawer.rounded {
  border-bottom-left-radius: 8px;
  border-bottom-right-radius: 8px;
}

.drawer > div {
  line-height: 1.5rem;
  overflow: hidden;
}

.drawer > div > * {
  padding: calc(14px + var(--accordion-border-radius));
  padding-bottom: 14px;
}

.open .drawer {
  grid-template-rows: 1fr;
}

.open .header {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

.footer {
  padding: 14px;
  background: var(--main-bg-color);
  border-top: 2px solid #4f4f4f;
  border-bottom-left-radius: var(--accordion-border-radius);
  border-bottom-right-radius: var(--accordion-border-radius);
}

.underline {
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  height: 1px;
}

.underline::before {
  position: absolute;
  content: "";
  width: 100%;
  height: 100%;
  background: var(--tf-text-color);
  transform: scaleX(0);
  transition: transform 200ms ease;
}

.open .underline::before {
  transform: scaleX(1);
}

.bottom {
  position: relative;
}

@media screen and (min-width: 660px) {
  .roundedImage .bottom {
    left: var(--accordion-height);
    width: calc(100% - var(--accordion-height));
  }
}
